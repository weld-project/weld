|partitionIndex:i32,kvs:vec[{{bool,vec[u8]},{f64,i64}}]|
  let project=result(
    for(
      kvs,
      appender[{bool,vec[u8],bool,f64,bool,i64}],
      |bs,i,kv|
        merge(bs,{kv.$0.$0,kv.$0.$1,false,kv.$1.$0,false,kv.$1.$1})
    )
  );
  let invariant=len(project);
  let buffer=iterate(
    {0L, appender[bool], 0, appender[i32], appender[i32], appender[u8]},
    |buffer1:{i64, appender[bool], i32, appender[i32], appender[i32], appender[u8]}|
      let index=buffer1.$0;
      let ns=lookup(project,index);
      let isNull=ns.$0;
      let length=if(
        (isNull==false),
        i32(len(ns.$1)),
        0
      );
      if(
        (index<invariant),
        {
          {
            (index+1L),
            merge(buffer1.$1,isNull),
            buffer1.$2+length,
            merge(buffer1.$3,buffer1.$2),
            merge(buffer1.$4,length),
            if((isNull==false),
            for(
              ns.$1,
              buffer1.$5,
              |b:appender[u8],i1:i64,n:u8| merge(b,n)
            ),
            buffer1.$5
            )
          },
          true
        },
        {buffer1,false}
      )
  );
  let vectors=for(
    project,
    {appender[bool],appender[f64],appender[bool],appender[i64]},
    |bs1,i2,ns:{bool,vec[u8],bool,f64,bool,i64}|
      let isNull2=(ns.$4);
      let isNull1=(ns.$2);
      {
      merge(bs1.$0,isNull1),
      merge(bs1.$1,if((isNull1==false), ns.$3, 0.0)),
      merge(bs1.$2,isNull2),merge(bs1.$3,if((isNull2==false), ns.$5, 0L))
      }
  );

  {result(
    buffer.$1
  ),result(
    buffer.$3
  ),result(
    buffer.$4
  ),result(
    buffer.$5
  ),result(
    vectors.$0
  ),result(
    vectors.$1
  ),result(
    vectors.$2
  ),result(
    vectors.$3
  )}
